
Vocabulary
====================

Repository:: A logical repository (=set of files), that is shared between
	multiple working directories.

Working Directory:: A concrete instantiation of a repository on a filesystem
	and thus an endpoint for synchronization. Contains a subset of the files
	in the repository.




General
====================

 * [101] The system keeps track of a virtual complete repository (=listing of all
   managed files in the repo + meta data), although it is not necessary that
   any one repository contains all those files

 * [102] There is (conceptually) no central all-knowing working directory. The user
   may however choose to set up a working-directory that is used for
   communication between all other working-dirs of the repo.
 
 * [103] The architectory allows extension by plugins, e.g. for special
   handling of MP3 files (that identifies content differently and adds new
   metadata about a file (=ID3))


Configuration
====================

 * [201] There is a per-working-directory configuration

 * [202] There is a per-repository configuration

 * [203] The per-repo config is kept synchronized between
   working directories.


File transfer / sync
====================

 * [301] The system provides the means to synchronize (transfer) files between
   defferent remote- and local repositories

 * [302] Repositories can be created or removed during operation

 * [303] Transfer/Sync by local filesystem is supported

 * [304] Transfer/Sync by ssh/sftp/... is supported

 * [305] The state of a different working directory can be pulled

 * [306] The state of a different working directory can be pushed

 * [307] Files present in the repo but not in the current working dir can be
   pulled from another repository

 * [308] If not explicitly specified, the system will choose from among the
   known working-directories of this repository for file pulling

 * [309] State-sync from another working-directory can be triggered explicitly
   by a user. Such a sync will not touch the working directory files but the
   attached local metadata such that the working-dir is aware of its state in
   relation to the central repository state.

 * [310] Files can be pushed to another working directory


File identification and storage
===============================

 * [401] Files can be identified by different means (hash sums, timestamp, size),
   depending on what is practical (e.g. large files that are rarely written
   might be identified solely by timestamps and size)

 * [402] The mechanism on how files are identified is configured on a per-repository
   basis (might differ for different files in the same repo though)

 * [403] The system allows to store files differently (e.g. normal, encrypted, compressed)

 * [404] The storage is configured on a by-working-directory basis (and thus can
   vary within a repository)

 * [405] The system can identify the same file in different storage states.
   
 * [406] The system can identify the same file in different storage states with
   little overhead and no user interaction. This can be achieved by tracking
   multiple IDs of a file (eg. hash of compressed and uncompressed file),
   utilization of public-key cryptography (encryption is then possible without
   user interaction, ubt not decryption)

 * [407] The user can decide to change the storage of a file in a working dir,
   eg. by packing/unpacking encrypting/decrypting it (in a way that is
   compatible to the assumptions made by the system, e.g. about which keypair
   is used for encryption, format of the compression). The system will, on the
   next working directory scan realize this change.

 * [408] For pushing files it can be specified that a repository should only
   ever be transmitted files in a specific storages (encrypted/compressed).

Different states / conflicts
============================

 * [501] The system keeps track of which repository contains the newest version of a
   file

 * [502] The system does not aim to keep older versions of files around

 * [503] If a file has been altered in different working directories, the user
   is notified about this conflict

 * [504] A user can choose to resolve a conflict by choosing a version to keep

 * [505] A user can choose to resolve a conflict by providing a new version of
   a file (e.g. the result of a manual merge)

File operations
=============================

 * [601] If a file is moved in a working directory A, a working directory B
   does not need to re-load the file but can just do the move also. This can
   be achieved by discovering that a file with the same content-ID is already
   available, either on file-pulling in B or on recording the change as move in repository A.

 * [602] If a file is deleted in a working directory, other working dirs are,
   in general, unaffected. If the working-directory was the last to contain
   that file, the system will stop tracking the file.

 * [603] In order to protect against unintentional deletions, the system
   usually keeps files write-protected. This is configurable in the
   per-working-directory configuration.
   other working directories, so that the user can now in advance whether a
   file deletion will destroy the last copy of a file.


